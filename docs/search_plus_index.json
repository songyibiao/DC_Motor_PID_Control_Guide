{"./":{"url":"./","title":"前言","keywords":"","body":"前言 配套硬件 淘宝链接：直流电机PID控制开发套件 使用配套硬件，可以节省硬件调试的时间，腾出更多时间来研究算法和代码。 交流社区 如需交流技术问题，请前往社区发帖：https://bbs.miaowlabs.com/ 仅开放邀请注册，-->点击注册。论坛社区能存储数据，方便查找问题，是一种很好的信息交流方式。 分发协议 在分发本书时，请完整保留本书原链接： https://m.miaowlabs.com 本书支持在线阅读，并提供 PDF 离线版本。强烈推荐在线阅读，在线阅读的视频观看效果更佳。 联系我们 邮箱：121349840@qq.com 因作者能力有限，在写作过程中难免会有错漏。如发现错误，请指正。 版权所有 本书版权归喵呜实验室MiaowLabs所有。未经授权，禁止转载。禁止一切形式的抄袭和改编。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"A02.html":{"url":"A02.html","title":"直流电机工作原理","keywords":"","body":"直流电机工作原理 本小节通过一个 3D 动画演示，直观地展示直流电机工作原理。 一千句文字解释，也比不过一个视频展示更为直观。下面我们通过视频来学习一下直流电机（DC Motor）的工作原理。相信你看完视频后，也会发出：“啊，我悟了！”之类的感叹。 为什么电机只要通电就会旋转，为什么电机里会有磁铁和线圈？本视频用动画的方式，直观的为您解释了电与磁之间的转化关系，以及如何通过电磁之间的联系驱动电机旋转。本视频搬运自油管，动画作者：Jared Owen。感谢原作者与搬运者。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"A03.html":{"url":"A03.html","title":"H桥电路工作原理","keywords":"","body":"H桥电路工作原理 本小节通过一个视频，直观地展示H桥电路工作原理。 在这里，我们推荐一个关于 H 桥电路工作原理的硬核视频。视频里，老外为了说明 H 桥电路工作原理，甚至不惜炸 MOS 管，绝对硬核。 本视频搬运自油管。感谢原作者和搬运者。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"A04.html":{"url":"A04.html","title":"编码器工作原理","keywords":"","body":"编码器工作原理 本小节通过一个视频，直观地展示编码器工作原理。 下面我们通过视频来学习一下编码器的工作原理。 本视频搬运自油管。感谢原作者和搬运者。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"E08.html":{"url":"E08.html","title":"PID控制原理","keywords":"","body":"PID控制原理与增量式PID算法 本小节在理论上讲解 PID 控制原理，先引出模拟 PID 控制公式，然后离散化处理得到数字 PID 控制公式，推导出位置式 PID 控制公式，再进一步推导出增量式 PID 控制公式。 将偏差的比例（Proportion）、积分（Integral）和微分（Differential）通过线性组合构成控制量，用这一控制量对被控对象进行控制，这样的控制器称 PID 控制器。 模拟 PID 控制 在模拟控制系统中，控制器最常用的控制规律是 PID 控制。为了说明控制器的工作原理，先看一个例子。下图所示是一个小功率直流电机的调速框图。 Image 1.5.1 - 小功率直流电机调速系统 alt > 上图中，给定转速 n0(t)n_0(t)n​0​​(t) 与实际转速 n(t)n(t)n(t) 进行比较，其差值 e(t)=n0(t)−n(t)e(t)=n_0(t)-n(t)e(t)=n​0​​(t)−n(t)，经过 PID 控制器调整后输出电压控制信号 u(t)u(t)u(t)，u(t)u(t)u(t) 经过功率放大后，驱动直流电动机改变其转速。 抽象化的模拟 PID 控制系统原理框图，如下图所示。该系统由模拟 PID 控制器和被控对象组成。 Image 1.5.2 - 模拟 PID 控制系统原理图 alt > 图中，r(t)r(t)r(t) 是给定值，y(t)y(t)y(t) 是系统的实际输出值，给定值与实际输出值构成控制偏差： e(t)=r(t)−y(t)e(t)=r(t)-y(t)e(t)=r(t)−y(t) （式 1-1） e(t)e(t)e(t) 作为 PID 控制的输入， 作为 PID 控制器的输出和被控对象的输入。 所以模拟 PID 控制器的 控制规律为 u(t)=kp[e(t)+1Ti∫e(t)dt+Tdde(t)dt]u(t)=kp[e(t)+\\frac{1}{Ti}\\int e(t)dt+Td\\frac{de(t)}{dt}]u(t)=kp[e(t)+​Ti​​1​​∫e(t)dt+Td​dt​​de(t)​​] （式 1-2） 其中，KpK_pK​p​​ 为控制器的比例系数，TiT_iT​i​​ 为控制器的积分时间，也称积分系数，TdT_dT​d​​为控制器的微分时间，也称微分系数。 数字 PID 控制 由于计算机的出现，计算机进入了控制领域。人们将模拟 PID 控制规律引入到计算机中来。对（式 1-2）的 PID 控制规律进行适当的变换，就可以用软件实现 PID 控制，即数字 PID 控制。 数字式 PID 控制算法可以分为位置式 PID 和增量式 PID 控制算法。 位置式 PID 算法 由于计算机控制是一种采样控制，它只能根据采样时刻的偏差计算控制量，而不能像模拟控制那样连续输出控制量，进行连续控制。由于这一特点，（式 1-2）中的积分项和微分项不能直接使用，必须进行离散化处理。离散化处理的方法为：以 T 作为采样周期，k 作为采样序号，则离散采样时间 kT对应着连续时间 t，用矩形法数值积分近似代替积分，用一阶后向差分近似代替微分，可作如下近似变换： t≈kT(k=0,1,2,...) t\\approx kT (k = 0,1,2,...) t≈kT(k=0,1,2,...) ∫e(t)dt≈T∑j=0ke(jT)=T∑j=0kej\\int e(t)dt\\approx T\\sum_{j=0}^{k} e(jT) = T\\sum_{j=0}^{k} e_j∫e(t)dt≈T∑​j=0​k​​e(jT)=T∑​j=0​k​​e​j​​ de(t)dt≈e(kT)−e[(k−1)T]T=ek−ek−1T\\frac{de(t)}{dt} \\approx \\frac{e(kT)-e[(k-1)T]}{T} = \\frac{e_k-e_{k-1}}{T}​dt​​de(t)​​≈​T​​e(kT)−e[(k−1)T]​​=​T​​e​k​​−e​k−1​​​​ 上式中，为了表达的方便，将类似于 e(kT)e(kT)e(kT) 简化成 eke_ke​k​​ 等。 将（式 2-1）代入（式 1-2），就可以得到离散的 PID 表达式为 uk=Kp[ek+(T)Ti∑j=0kej+Td(ek−ek−1)T] u_k = Kp[e_k+\\frac{(T)}{Ti}\\sum_{j=0}^{k}e_j+Td\\frac{(e_k-e_{k-1})}{T}]u​k​​=Kp[e​k​​+​Ti​​(T)​​∑​j=0​k​​e​j​​+Td​T​​(e​k​​−e​k−1​​)​​] （式 2-2） 或 uk=Kp∗ek+Ki∑j=0kej+Kd(ek−ek−1) u_k = Kp*e_k+Ki\\sum_{j=0}^{k}e_j+Kd(e_k-e_{k-1})u​k​​=Kp∗e​k​​+Ki∑​j=0​k​​e​j​​+Kd(e​k​​−e​k−1​​) （式 2-3） 其中， kkk 为 采样序号，k = 0,1,2,...； uku_ku​k​​ 为第 k 次采样时刻的计算机输出值； eke_ke​k​​ 为第 k 次采样时刻输入的偏差值； ek−1e_{k-1}e​k−1​​ 为第 k-1 次采样时刻输入的偏差值； KiKiKi 为积分系数，Ki=kp∗TTiKi=kp*\\frac{T}{Ti}Ki=kp∗​Ti​​T​​； KdKdKd 为微分系数，Kd=Kp∗TdTKd=Kp*\\frac{Td}{T}Kd=Kp∗​T​​Td​​。 如果采样周期足够小，则 （式 2-2）或（式 2-3）的近似计算可以获得足够精确的结果，离散控制过程与连续过程十分接近。 （式 2－2）或（式 2－3） 表示的控制算法式直接按（式 1 －2） 所给出的 PID 控制规律定义进行计算的，所以它给出了全部控制量的大小，因此被称为全量式或位置式 PID 控制算法。 这种算法的缺点是：由于全量输出，所以每次输出均与过去状态有关，计算时要对 eke_ke​k​​ 进行累加，工作量大。并且，因为计算机输出的对应的是执行机构的实际位置，如果计算机出现故障，输出的将大幅度变化，会引起执行机构的大幅度变化，有可能因此造成严重的生产事故，这在实际生产际中是不允许的。 增量式 PID 算法 所谓增量式 PID 是指数字控制器的输出只是控制量的增量 △uk\\bigtriangleup u_k△u​k​​ 。 当执行机构需要的控制量是增量，而不是位置量的绝对数值时，可以使用增量式 PID 控制算法进行控制。 增量式 PID 控制算法可以通过（式 2－2）推导出。由（式 2－2）可以得到控制器的第 k－1 个采样时刻的输出值为： u(k−1)=Kp[e(k−1)+(T)Ti∑j=0k−1ej+Td(e(k−1)−e(k−2))T] u_(k-1) = Kp[e_(k-1)+\\frac{(T)}{Ti}\\sum_{j=0}^{k-1}e_j+Td\\frac{(e_(k-1)-e_(k-2))}{T}]u​(​​k−1)=Kp[e​(​​k−1)+​Ti​​(T)​​∑​j=0​k−1​​e​j​​+Td​T​​(e​(​​k−1)−e​(​​k−2))​​] （式 2-4） 用（式 2-2）减去（式 2-4）相减并整理，就可以得到增量式 PID 控制算法公式： △uk=uk−uk−1=Kp[ek−ek−1+(T)Tiek+Tdek−2ek−1+ek−2T] \\bigtriangleup u_k = u_k - u_{k-1} = Kp[e_k-e_{k-1}+\\frac{(T)}{Ti}e_k+Td\\frac{e_k-2e_{k-1}+e_{k-2}}{T}]△u​k​​=u​k​​−u​k−1​​=Kp[e​k​​−e​k−1​​+​Ti​​(T)​​e​k​​+Td​T​​e​k​​−2e​k−1​​+e​k−2​​​​] =Kp(1+TTi+TdT)ek−Kp(1+2TdT)ek−1+KpTdTek−2= Kp(1+\\frac{T}{T_i}+\\frac{Td}{T})e_k - Kp(1+\\frac{2Td}{T})e_{k-1}+Kp\\frac{Td}{T}e_{k-2}=Kp(1+​T​i​​​​T​​+​T​​Td​​)e​k​​−Kp(1+​T​​2Td​​)e​k−1​​+Kp​T​​Td​​e​k−2​​ （式 2-5） =Aek+Bek−1+Cek−2=Ae_k+Be_{k-1}+Ce_{k-2}=Ae​k​​+Be​k−1​​+Ce​k−2​​ 其中， A=Kp(1+TTi+TdT)A=Kp(1+\\frac{T}{T_i}+\\frac{Td}{T})A=Kp(1+​T​i​​​​T​​+​T​​Td​​)； B=Kp(1+2TdT)B=Kp(1+\\frac{2Td}{T})B=Kp(1+​T​​2Td​​)； C=KpTdTC=Kp\\frac{Td}{T}C=Kp​T​​Td​​。 由（式 2－5）可以看出，如果计算机控制系统采用恒定的采样周期 T ，一旦确定 A、 B、 C，只要使用前后三次测量的偏差值，就可以由（式 2－5）求出控制量。 增量式 PID 控制算法与位置式 PID 算法（式 2－2）相比，计算量小的多，因此在实际中得到广泛的应用。 而位置式 PID 控制算法也可以通过增量式控制算法推出递推计算公式： uk=uk−1+△uku_k=u_{k-1}+\\bigtriangleup u_ku​k​​=u​k−1​​+△u​k​​ （式 2-6） （式 2-6）就是目前在计算机控制中广泛应用的数字递推 PID 控制算法。 采样周期的选择 香农（Shannon） 采样定律 ：为不失真地复现信号的变化， 采样频率至少应大于或等于连续信号最高频率分量的二倍。根据采样定律可以确定采样周期的上限值。实际采样周期的选择还要受到多方面因素的影响，不同的系统采样周期应根据具体情况来选择。 采样周期的选择，通常按照过程特性与干扰大小适当来选取采样周期：即对于响应快、（如流量、压力） 波动大、易受干扰的过程，应选取较短的采样周期；反之，当过程响应慢（如温度、 成份）、滞后大时，可选取较长的采样周期。 采样周期的选取应与 PID 参数的整定进行综合考虑， 采样周期应远小于过程的扰动信号的周期，在执行器的响应速度比较慢时，过小的采样周期将失去意义，因此可适当选大一点；在计算机运算速度允许的条件下，采样周期短， 则控制品质好；当过程的纯滞后时间较长时， 一般选取采样周期为纯滞后时间的 1/4～1/8。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"B01.html":{"url":"B01.html","title":"理论分析","keywords":"","body":"理论分析 位置闭环控制就是根据编码器的脉冲累加测量电机的位置信息，并与目标值进行比较，得到控制偏差，然后通过对偏差的比例、积分、微分进行控制，使偏差趋向于零的过程。 理论分析 根据位置式离散 PID 公式： PWM=Kp∗e(k)+Ki∗∑e(k)+Kd[e(k)−e(k−1)]\r PWM = K_p * e(k) + K_i * \\sum e(k) + K_d[e(k)-e(k-1)]\r PWM=K​p​​∗e(k)+K​i​​∗∑e(k)+K​d​​[e(k)−e(k−1)] 其中， e(k)e(k) e(k)：本次偏差； e(k−1)e(k-1)e(k−1)：上一次的偏差； ∑e(k)\\sum e(k)∑e(k)：e(k)e(k)e(k)以及之前的偏差的累积和，k 为 1、2、3...； PWMPWMPWM：输出 控制流程图 位置环控制原理图如下图所示。其中需要说明的是，我们这边是通过微机实现 PID 控制的，所以下面的 位置式 PID 控制器是一个软件实现的过程，比如在我们的代码里就是一个我们定义的函数。 C 语言实现 位置环 PID 控制 C 语言实现的代码如下： int Position_PID(int Encoder,int Target) { static float Bias,Pwm,Integral_bias,Last_Bias; Bias=Encoder-Target; //计算偏差 Integral-bisa+=Bias; //求出偏差的积分 Pwm=Position|_Kp*Bias+Position_Ki*Integral_bias+Position_Kd*(Bias-Last_Bias); Last_Bias=Bias; //保存上一次偏差 return Pwm; //输出 } 第一行是相关内部变量的定义。 第二行是求出速度偏差，由测量值减去目标值。 第三行通过累加求出偏差的积分。 第四行使用位置式 PID 控制器求出电机 PWM。 第五行保存上一次偏差，便于下次调用。 最后一行是返回。 然后，在定时中断服务函数里面调用该函数实现我们的控制目标： Moto=Position_PID(Encoder,Target_Position); Set_Pwm(Moto); *//===赋值给 PWM 寄存器 参数整定 首先我们需要明确我们的控制目标，也就是满足控制系统的 3 个要求： 稳定性 快速性 准确性 具体的评估指标有最大超调量、上升时间、静差等。 最大超调量是响应曲线的最大峰值与稳态值的差，是评估系统稳定性的一个重要指标；上升时间是指响应曲线从原始工作状态出发，第一次到达输出稳态值所需的时间，是评估系统快速性的一个重要指标；静差是被控量的稳定值与给定值之差，一般用于衡量系统的准确性，具体可以参考图 2 的解析。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}